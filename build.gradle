plugins {
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            url = "https://maven.architectury.dev"
            content {
                includeGroup "dev.architectury"
            }
        }

        maven {
            url = "https://cursemaven.com"
        }

        // Forge Config Api Port
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }

        // JEI
        maven {
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
//        maven {
//            name = "ModMaven"
//            url = "https://modmaven.dev"
//        }

        maven {
            name = "FabricMC"
            url = "https://maven.fabricmc.net/"
        }



        // saps.dev Maven (KubeJS and Rhino)
        maven {
            url = "https://maven.saps.dev/minecraft"
            content {
                includeGroup "dev.latvian.mods"
            }
        }

        maven {
            url "https://maven.latvian.dev/releases"
            content {
                includeGroup "dev.latvian.apps"
            }
        }

        maven { url = "https://jitpack.io/" }
    }

    loom {
        silentMojangMappingsLicense()
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:HotswapAgent=core'
            }
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:${rootProject.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${parchment_version}@zip")
        }

        modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
        modCompileOnlyApi("curse.maven:jade-324717:${jade_neoforge_id}")
        modCompileOnly("dev.latvian.mods:kubejs-neoforge:${kubejs_version}")

        //modCompileOnly "dev.emi:emi-xplat-intermediary:${emi_version}:api"
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    processResources {
        var expandProps = [
                minecraft_version            : minecraft_version,
                minecraft_version_range      : minecraft_version_range,
                neoforge_version             : neoforge_version,
                neoforge_version_range       : neoforge_version_range,
                neoforge_loader_version_range: neoforge_loader_version_range,
                mod_id                       : mod_id,
                mod_name                     : mod_name,
                mod_version                  : mod_version,
                mod_authors                  : mod_authors,
                mod_description              : mod_description,
                mod_issues                   : mod_issues,
                mod_page                     : mod_page,
                mod_github                   : mod_github,
                mod_license                  : mod_license,
                maven_group                  : maven_group
        ]
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', "*.mixins.json"]) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    publishing {
        publications {
            mavenForge(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            var path = System.getenv("LOCAL_MAVEN")
            if (path != null) {
                maven {
                    name = 'local'
                    url = uri(path + "/maven")
                }
            }
        }
    }
}

/**
 * Gets the first part (topmost) of a changelog file.
 * Expects it to be in the following format:
 * [
 *  ## latest version
 *      changes
 *
 *  ## older version
 *      changes
 * ]
 * Will return an empty string if failed.
 */
def getLatestVersionChangelog() {
    def changelogFileName = 'CHANGELOG.md'
    def changelogFile = file(changelogFileName)
    if (changelogFile.exists()) {
        def changelogContent = changelogFile.text
        def changelogParts = changelogContent.split(/(?m)^##\s/)

        if (changelogParts.size() > 1) {
            return "## " + changelogParts[1].trim() // First part will always be second in the list
        } else {
            println("[WARN] Changelog does not contain any versions.")
            return ""
        }
    } else {
        println("[WARN] Changelog file <${changelogFileName}> does not exist.")
        return ""
    }
}

project.ext.changelog = getLatestVersionChangelog()

task printLatestVersionChangelog {
    doLast {
        println project.changelog
    }
}