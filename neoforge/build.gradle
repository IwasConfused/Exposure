plugins {
    id "com.github.johnrengelman.shadow"
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}") { transitive = false }

    //modCompileOnlyApi("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    // Not working in dev env:
    // modRuntimeOnly("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    // modRuntimeOnly("curse.maven:probejs-585406:${probejs_forge_id}")

    //modCompileOnlyApi("curse.maven:jade-324717:${jade_forge_id}")
    //modRuntimeOnly("curse.maven:jade-324717:${jade_forge_id}") { transitive = false }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

loom {
    accessWidenerPath.set(project(":common").loom.accessWidenerPath)
}

//loom {
//    accessWidenerPath = project(":common").loom.accessWidenerPath
//
//    forge {
//        convertAccessWideners = true
//        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
//
//        mixinConfig "exposure-common.mixins.json"
//        mixinConfig "exposure.mixins.json"
//    }
//
//    runs {
//        create("client2") {
//            inherit(getByName("client"))
//
//            name("Second Client")
//            programArgs("--username", "AnotherDev")
//
//            property 'mixin.env.remapRefMap', 'true'
//            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
//
//            client()
//        }
//    }
//}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    injectAccessWidener = true
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
    input.set shadowJar.archiveFile
}

// https://github.com/shedaniel/unified-publishing
unifiedPublishing {
    project {
        displayName = "${mod_name} - NeoForge ${minecraft_version} - ${mod_version}" // Optional, name of the file
        version = mod_version // Optional, Inferred from project by default
        changelog = rootProject.ext.changelog
        releaseType = mod_release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = [minecraft_version]
        gameLoaders = ["neoforge"]

        mainPublication tasks.remapJar // Declares the publicated jar

        curseforge {
            token = System.getenv("CURSEFORGE_TOKEN")
            id = mod_curseforge_project_id // Required, must be a string, ID of CurseForge project

            relations {
                optional "jei"
                // optional "create"
            }
        }

        modrinth {
            token = System.getenv("MODRINTH_TOKEN")
            id = mod_modrinth_project_id // Required, must be a string, ID of Modrinth project

            displayName = "${mod_name} - ${mod_version}" // Optional, name of the file

            relations {
                optional "jei"
                // optional "create"
            }
        }
    }
}
